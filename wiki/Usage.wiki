_Describe how to run the various predictors algorithms_

= Introduction =

In this wiki we'll explain in details how to configure and run the predictors implemented in the project.

= Configuration =

Different parameters used by the predictors can be configured using the [http://code.google.com/p/oknetflix/source/browse/trunk/src/main/resources/predictors.properties predictors.properties] file located in the resources folder.
Every predictor has its own parameters marked by the predictor name as a prefix follow by the parameter name. For example, in order to configure the number of neighbors used by the KNN predictor, you should edit the "knn.neighborsNum" property.
For a full description regarding every property, please see the documentation inside the file.

= Running the predictors =

*Remark:* All classes mentioned below should be run with heap size set to at least 3000m (we recommend setting it to 3300m).

Before running the predictors it's advised to run the AlgorithmRunner class and push the "Run Global Effects Calculator" button in order to calculate the models containing global effects residuals as rating data.

 * == _KNN Predictor_ ==
   # Calculate similarity model:
   {{{
SimilarityCalculator simCalc = new PearsonCorrelationCoefifcientSimilarity();		

simCalc.calculateSimilarities();		

simCalc.saveCalculatedData(Constants.NETFLIX_OUTPUT_DIR + "residualsSimilarityModelScores.data");
   }}}
   # Run the predictor class:
   {{{
KNNGlobalEffectPredictor predictorClass = new KNNGlobalEffectPredictor(PearsonCorrelationCoefifcientSimilarity.getSimilarityFromFile(Constants.NETFLIX_OUTPUT_DIR + "\\residualsSimilarityModelScores.data"), 
				new UserIndexedModelResiduals(), PredictorProperties.getInstance().getPredictorIntProperty(Predictors.KNN, PropertyKeys.NEIGHBORS_NUM, 50), Constants.NETFLIX_OUTPUT_DIR + "globalEffects/Effect11.data");
PredictionTester.getProbeError(predictorClass, Constants.NETFLIX_OUTPUT_DIR + "Predictions/KNN.txt", Constants.NETFLIX_OUTPUT_DIR + Constants.DEFAULT_PROBE_FILE_NAME);
   }}}

   _Remark:_ In the current section we explained how to run the KNN algorithm using global effects residuals as ratings data, in order to run the algorithm using the raw ratings scores you'll need to run the appropriate similarity and predictor classes (for more information see [http://code.google.com/p/oknetflix/source/browse/trunk/src/main/java/edu/mta/ok/nworkshop/predictor/KNNPredictor.java KNNPredictor] and [http://code.google.com/p/oknetflix/source/browse/trunk/src/main/java/edu/mta/ok/nworkshop/similarity/PearsonCorrelationCoefifcientSimilarityRawScores.java PearsonCorrelationCoefifcientSimilarityRawScores].

 * == _Improved KNN Predictor_ ==
   # Calculate the common raters model:
   {{{
ModelUtils.calculateCommonRatersNum(new MovieIndexedModelRatings(), new UserIndexedModelRatings());
   }}}
   # Calculate the interpolation values by running the PreProcessItemViewUsers class:
   {{{
PreProcessItemViewUsers processClass = new PreProcessItemViewUsers(Constants.NETFLIX_OUTPUT_DIR + "cleanedMovieIndexedSlabDates.data", Constants.NETFLIX_OUTPUT_DIR + "cleanedUserIndexedSlabDates.data");
processClass.calcFinalValues();
   }}}
   # Calculate interpolation similarity model:
   {{{
InterpolationSimilarityResiduals sim = new InterpolationSimilarityResiduals(Constants.NETFLIX_OUTPUT_DIR + "cleanedMovieIndexedSlabDates.data", Constants.NETFLIX_OUTPUT_DIR + "cleanedUserIndexedSlabDates.data");
sim.calculateSimilarities();
sim.saveCalculatedData(Constants.NETFLIX_OUTPUT_DIR + "interpolation\\similarityModel.data");
   }}}
   # Convert the similarity model to float in order to decrease memory consumption:
   {{{
ModelUtils.convertDoubleModelIntoFloat(Constants.NETFLIX_OUTPUT_DIR + "interpolation\\similarityModel.data", Constants.NETFLIX_OUTPUT_DIR + "interpolation\\similarityModel-Float.data");
   }}} 
   # Run the improved knn predictor:
   {{{
ImprovedKNNPredictionResiduals predictor = new ImprovedKNNPredictionResiduals(
				InterpolationSimilarityRawScores.getSimilarityFromFile(Constants.NETFLIX_OUTPUT_DIR + "interpolation\\similarityModel-Float.data", true),new UserIndexedModelResiduals(), Constants.NETFLIX_OUTPUT_DIR + "interpolation\\moviesCommonUsersLists-Final.data");
	
PredictionTester.getProbeError(predictor, Constants.NETFLIX_OUTPUT_DIR + "Predictions/InterpolationPredictorResiduals-" + DEFAULT_NEIGHBOARS_NUM +"Neighbors.txt", Constants.NETFLIX_OUTPUT_DIR + Constants.DEFAULT_PROBE_FILE_NAME);
   }}}
 * == _SVD_ ==
   Run Predictor (the number of features is taken from predictors,properties file):
   {{{
SVDFeaturePredictor predictor = new SVDFeaturePredictor();
PredictionTester.getProbeError(predictor, Constants.NETFLIX_OUTPUT_DIR + "Predictions/SVD.txt", Constants.NETFLIX_OUTPUT_DIR + Constants.DEFAULT_PROBE_FILE_NAME);
   }}}
 * == _Improved SVD_ ==
   Run predictor (the number of features is taken from predictors,properties file):
   {{{
ImprovedSVDFeaturePredictor predictor = new ImprovedSVDFeaturePredictor();
PredictionTester.getProbeError(predictor, Constants.NETFLIX_OUTPUT_DIR + "Predictions/ImprovedSVD.txt", Constants.NETFLIX_OUTPUT_DIR + Constants.DEFAULT_PROBE_FILE_NAME);
   }}}
 * == _Combine Predictions_ ==
   After calculating the predictions files from different algorithms, you can combine the results by running the [http://code.google.com/p/oknetflix/source/browse/trunk/src/main/java/edu/mta/ok/nworkshop/ui/AlgorithmRunner.java AlgorithmRunner] class and pressing the "Combine Predictions" button. The button simply loads all the text files located in binFiles/Predictions and calls [http://code.google.com/p/oknetflix/source/browse/trunk/src/main/java/edu/mta/ok/nworkshop/predictor/CombinePredictions.java CombinePredictions] with the loaded predictions.

= Achieving 0.8988 RMSE Score =

We achieved our RMSE score by combining results from the following algorithms:

 * KNN: 
   # Raw ratings data, 10 neighbors - RMSE 
   